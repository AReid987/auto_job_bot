// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

// TODO: password strategy (hashing? auth0?)
model User {
  id               String             @id @default(uuid())
  firstName        String             @map("firstName")
  lastName         String             @map("lastName")
  email            String             @unique
  userProfile      UserProfile?
  jobSearches      JobSearch[]
  aiAgents         AIAgent[]
  SearchPreference SearchPreference[]

  @@map("users")
}

model UserProfile {
  id             String @id @default(uuid())
  additionalInfo Json   @map("additionalInfo")
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique @map("userId")

  @@map("userProfiles")
}

model JobTitle {
  id          String      @id @default(uuid())
  title       String
  jobSearches JobSearch[] @relation("JobTitlesToJobSearches")

  @@map("jobTitles")
}

model JobSearch {
  id              String           @id @default(uuid())
  startDate       DateTime         @map("startDate")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @map("userId")
  jobApplications JobApplication[]
  jobTitles       JobTitle[]       @relation("JobTitlesToJobSearches")

  @@map("jobSearches")
}

model SearchPreference {
  id        String  @id @default(uuid())
  remote    Boolean
  location  String
  minSalary Float   @map("minSalary")
  userId    String  @map("userId")
  user      User    @relation(fields: [userId], references: [id])

  @@map("searchPreferences")
}

model JobApplication {
  id              String            @id @default(uuid())
  applicationDate DateTime          @map("applicationDate")
  status          ApplicationStatus
  formResponses   Json
  jobSearch       JobSearch         @relation(fields: [jobSearchId], references: [id])
  jobSearchId     String            @map("jobSearchid")

  @@map("jobApplications")
}

model AIAgent {
  id        String @id @default(uuid())
  name      String
  role      String
  goal      String
  backstory String
  userId    String @map("userId")
  user      User   @relation(fields: [userId], references: [id])

  @@map("aiAgents")
}

enum ApplicationStatus {
  pending
  submitted
  rejected
}

