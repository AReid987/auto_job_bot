services:
  db:
    build:
      context: ./postgresql
      dockerfile: Dockerfile
    restart: always
    env_file: .env
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  nestjs_server:
    build:
      context: ./nestjs_api
      dockerfile: Dockerfile
      args:
        - TARGET_ENV=${TARGET_ENV}
    env_file:
      - .env
    container_name: nestjs_api
    environment:
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - DISABLE_ERD=true
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/nestjs_api:/usr/src/app
      # - ./nestjs_api/usr/src/app/node_modules:/usr/src/app/node_modules
    command: /bin/sh -c "dockerize -wait tcp://db:${POSTGRES_PORT} -timeout 30s && if [ \"$$TARGET_ENV\" = \"development\" ]; then pnpm run start:dev; else dumb-init node dist/main; fi"

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: nestjs_pgadmin4
    env_file: .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - db

volumes:
  postgres_data:
